name: Build and Deploy Local Agent

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**'
  pull_request:
    branches: [ main ]
    paths:
      - '**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: reacharr-localagent
  IMAGE_NAME_FRONTEND: reacharr-configui

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    # Create local-agent directory structure
    - name: Create local-agent directory structure
      run: |
        mkdir -p local-agent/backend
        mkdir -p local-agent/frontend
        mkdir -p local-agent/backend/certs
        mkdir -p local-agent/frontend/certs

    # Create configuration files from GitHub secrets
    - name: Create environment configuration
      run: |
        cat > local-agent/.env << 'EOF'
        # Reacharr Local Agent Configuration
        # Auto-generated from GitHub secrets
        
        # Remote Server Configuration
        REMOTE_SERVER_URL=${{ secrets.REMOTE_SERVER_URL || 'https://reacharr.com' }}
        MQTT_BROKER_URL=${{ secrets.MQTT_BROKER_URL || 'mqtts://reacharr.com:8883' }}
        MQTT_PASSWORD=${{ secrets.MQTT_PASSWORD || 'reacharr_agent_password' }}
        
        # Application Settings
        NODE_ENV=production
        PORT=3000
        LOG_LEVEL=info
        CORS_ORIGIN=http://localhost:3001
        
        # Agent Configuration
        CONFIG_PATH=/app/data/agent-config.json
        
        # MQTT Configuration
        MQTT_URL=${{ secrets.MQTT_BROKER_URL || 'mqtts://reacharr.com:8883' }}
        MQTT_USERNAME=${{ secrets.MQTT_USERNAME || 'reacharr_agent' }}
        MQTT_CLIENT_ID=reacharr-agent-{random}
        
        # Firebase Configuration
        FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID || 'managarr-7c808' }}
        FIREBASE_SERVICE_ACCOUNT_PATH=/app/firebase-service-account.json
        
        # Default Configuration (overridden by config.json)
        RADARR_URL=http://localhost:7878
        RADARR_API_KEY=configure_via_ui
        SONARR_URL=http://localhost:8989
        SONARR_API_KEY=configure_via_ui
        
        # Logging
        LOG_FILE=/app/data/agent.log
        
        # Sync Configuration
        SYNC_INTERVAL=30000
        RETRY_ATTEMPTS=3
        RETRY_DELAY=5000
        
        # Security
        API_KEY_HEADER=X-API-Key
        
        # Health Check
        HEALTH_CHECK_INTERVAL=60000
        EOF

    - name: Create backend environment for Docker build
      run: |
        cp local-agent/.env backend/.env.production

    - name: Create Firebase service account file
      run: |
        cat > backend/firebase-service-account.json << 'EOF'
        {
          "type": "service_account",
          "project_id": "${{ secrets.FIREBASE_PROJECT_ID || 'managarr-7c808' }}",
          "private_key_id": "${{ secrets.FIREBASE_PRIVATE_KEY_ID }}",
          "private_key": "${{ secrets.FIREBASE_PRIVATE_KEY }}",
          "client_email": "${{ secrets.FIREBASE_CLIENT_EMAIL }}",
          "client_id": "${{ secrets.FIREBASE_CLIENT_ID }}",
          "auth_uri": "https://accounts.google.com/o/oauth2/auth",
          "token_uri": "https://oauth2.googleapis.com/token",
          "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
          "client_x509_cert_url": "${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }}",
          "universe_domain": "googleapis.com"
        }
        EOF
        
        # Also copy to local-agent directory
        cp backend/firebase-service-account.json local-agent/firebase-service-account.json

    - name: Create frontend Firebase config
      run: |
        cat > frontend/src/firebase-config.json << 'EOF'
        {
          "apiKey": "${{ secrets.FIREBASE_WEB_API_KEY }}",
          "authDomain": "${{ secrets.FIREBASE_AUTH_DOMAIN || 'managarr-7c808.firebaseapp.com' }}",
          "projectId": "${{ secrets.FIREBASE_PROJECT_ID || 'managarr-7c808' }}",
          "storageBucket": "${{ secrets.FIREBASE_STORAGE_BUCKET || 'managarr-7c808.firebasestorage.app' }}",
          "messagingSenderId": "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}",
          "appId": "${{ secrets.FIREBASE_APP_ID }}",
          "measurementId": "${{ secrets.FIREBASE_MEASUREMENT_ID }}"
        }
        EOF
        
        # Also create it in the frontend root for nginx serving
        cp frontend/src/firebase-config.json frontend/firebase-config.json
        # Copy to local-agent directory
        cp frontend/firebase-config.json local-agent/frontend/firebase-config.json

    # Convert repository owner to lowercase for GHCR compatibility
    - name: Set lowercase repository owner
      run: |
        echo "REPO_OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    # Log in to Container Registry
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Download CA certificate for MQTT TLS connection
    - name: Download MQTT CA certificate
      run: |
        echo "Downloading CA certificate for MQTT TLS connection..."
        
        # Create certs directories
        mkdir -p backend/certs
        mkdir -p frontend/certs
        
        # Function to try downloading with retries
        download_with_retry() {
          local url="$1"
          local output="$2"
          local max_attempts=3
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts: Downloading from $url"
            if curl -f -s -L --connect-timeout 30 --max-time 60 -o "$output" "$url"; then
              echo "‚úÖ Downloaded successfully on attempt $attempt"
              return 0
            else
              echo "‚ùå Attempt $attempt failed"
              sleep 5
              attempt=$((attempt + 1))
            fi
          done
          return 1
        }
        
        # Try HTTPS first with retries
        echo "Attempting HTTPS download with retries..."
        if download_with_retry "https://reacharr.com/mqtt/ca.crt" "backend/certs/ca.crt"; then
          echo "‚úÖ Downloaded via HTTPS"
        else
          echo "‚ö†Ô∏è HTTPS failed, trying HTTP with retries..."
          if download_with_retry "http://reacharr.com/mqtt/ca.crt" "backend/certs/ca.crt"; then
            echo "‚úÖ Downloaded via HTTP"
          else
            echo "‚ùå All download attempts failed"
            echo "üîç Let's check if reacharr.com is reachable..."
            curl -I https://reacharr.com || echo "Cannot reach reacharr.com"
            
            # Try using the backup certificate from repository
            if [ -f "certs/mqtt-ca.crt" ]; then
              echo "üìÅ Using backup certificate from repository..."
              cp certs/mqtt-ca.crt backend/certs/ca.crt
              echo "‚úÖ Using repository backup certificate"
            else
              echo "‚ö†Ô∏è No backup certificate found, creating a placeholder certificate for build to continue..."
              # Create a self-signed certificate as final fallback
              openssl req -x509 -newkey rsa:2048 -keyout backend/certs/ca.key -out backend/certs/ca.crt -days 365 -nodes -subj "/C=US/ST=State/L=City/O=Reacharr/CN=reacharr.com" || {
                echo "‚ùå Failed to create fallback certificate"
                exit 1
              }
              echo "‚ö†Ô∏è Using self-signed fallback certificate - MQTT TLS may not work properly"
            fi
          fi
        fi
        
        # Copy certificate to frontend and local-agent directories
        cp backend/certs/ca.crt frontend/certs/ca.crt
        cp backend/certs/ca.crt local-agent/backend/certs/ca.crt
        cp backend/certs/ca.crt local-agent/frontend/certs/ca.crt
        
        # Verify certificate was downloaded and is valid
        if [ -f backend/certs/ca.crt ] && [ -s backend/certs/ca.crt ]; then
          echo "‚úÖ CA certificate downloaded successfully for backend"
          echo "üìÅ File size: $(ls -lh backend/certs/ca.crt | awk '{print $5}')"
          
          # Try to verify certificate format
          if openssl x509 -in backend/certs/ca.crt -noout -text >/dev/null 2>&1; then
            echo "‚úÖ Certificate format is valid"
            echo "üìã Certificate details:"
            openssl x509 -in backend/certs/ca.crt -noout -subject -dates
          else
            echo "‚ö†Ô∏è Certificate format verification failed, but file exists - continuing anyway"
            echo "üìÑ First few lines of downloaded file:"
            head -3 backend/certs/ca.crt
          fi
        else
          echo "‚ùå Failed to download CA certificate for backend"
          exit 1
        fi
        
        if [ -f local-agent/frontend/certs/ca.crt ] && [ -s local-agent/frontend/certs/ca.crt ]; then
          echo "‚úÖ CA certificate copied successfully for frontend"
        else
          echo "‚ùå Failed to copy CA certificate for frontend"
          exit 1
        fi

    # Extract metadata for Docker
    - name: Extract metadata (backend)
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.REPO_OWNER_LOWER }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata (frontend)
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.REPO_OWNER_LOWER }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    # Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Build and push Docker images
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Create release artifacts
    - name: Create release directory and copy files
      run: |
        mkdir -p release/local-agent
        
        # Copy essential files to local-agent
        cp -r backend release/local-agent/
        cp -r frontend release/local-agent/
        cp docker-compose.yml release/local-agent/
        cp local-agent/.env release/local-agent/
        cp local-agent/firebase-service-account.json release/local-agent/
        
        # Create data directory
        mkdir -p release/local-agent/data
        
        # Remove build artifacts and node_modules from copied directories
        rm -rf release/local-agent/backend/node_modules
        rm -rf release/local-agent/frontend/node_modules
        rm -rf release/local-agent/backend/dist

    - name: Create user-friendly docker-compose
      run: |
        cat > release/docker-compose.yml << 'EOF'
        version: '3.8'
        
        services:
          # Reacharr Local Agent Backend
          reacharr-agent:
            image: ${{ env.REGISTRY }}/${{ env.REPO_OWNER_LOWER }}/${{ env.IMAGE_NAME_BACKEND }}:latest
            container_name: reacharr-agent
            volumes:
              - ./data:/app/data
              - /var/run/docker.sock:/var/run/docker.sock:ro
            ports:
              - "3000:3000"
            networks:
              - reacharr-network
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "node", "-e", "const http = require('http'); http.get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
        
          # Configuration Web UI
          reacharr-config-ui:
            image: ${{ env.REGISTRY }}/${{ env.REPO_OWNER_LOWER }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
            container_name: reacharr-config-ui
            environment:
              - REACT_APP_AGENT_API_URL=http://localhost:3000
            ports:
              - "3001:3000"
            networks:
              - reacharr-network
            restart: unless-stopped
            depends_on:
              reacharr-agent:
                condition: service_healthy
        
        networks:
          reacharr-network:
            driver: bridge
        
        volumes:
          reacharr_data:
        EOF

    - name: Create user README
      run: |
        cat > release/README.md << 'EOF'
        # üöÄ Reacharr Local Agent - Ready to Run!
        
        This is the **official pre-built** Reacharr Local Agent with all configuration included.
        **No environment variables needed!** Just run and configure through the web UI.
        
        ## ‚ö° Quick Start (2 minutes)
        
        1. **Download this folder** or just the `docker-compose.yml` file
        
        2. **Start the agent:**
           ```bash
           docker-compose up -d
           ```
        
        3. **Configure your setup:**
           - üåê Open **http://localhost:3001** in your browser
           - üîß Add your Radarr/Sonarr servers
           - ‚úÖ Complete the setup wizard
        
        4. **You're done!** The agent will automatically connect to Reacharr.com
        
        ## üì± Access Points
        
        - **Configuration UI**: http://localhost:3001
        - **Agent API**: http://localhost:3000 (internal use)
        
        ## üîß Configuration Examples
        
        ### Radarr/Sonarr on the same machine:
        - **URL**: `http://host.docker.internal:7878` (Radarr)
        - **URL**: `http://host.docker.internal:8989` (Sonarr)
        
        ### Radarr/Sonarr in Docker containers:
        - **URL**: `http://radarr:7878` (if containers share the same network)
        - **URL**: `http://sonarr:8989`
        
        ### Remote Radarr/Sonarr:
        - **URL**: `http://192.168.1.100:7878` (use actual IP)
        
        ## üìä Management Commands
        
        ```bash
        # View logs
        docker-compose logs -f reacharr-agent
        
        # Restart services
        docker-compose restart
        
        # Update to latest version
        docker-compose pull && docker-compose up -d
        
        # Stop everything
        docker-compose down
        
        # Complete reset (removes all data)
        docker-compose down -v
        rm -rf ./data
        ```
        
        ## üìÅ Data Storage
        
        All configuration and logs are stored in the `./data/` directory:
        - `./data/agent-config.json` - Your agent configuration
        - `./data/agent.log` - Application logs
        
        ## üêõ Troubleshooting
        
        ### Agent won't start?
        ```bash
        docker-compose logs reacharr-agent
        ```
        
        ### Can't access Radarr/Sonarr?
        - ‚úÖ Check if Radarr/Sonarr are running
        - ‚úÖ Verify URLs and API keys
        - ‚úÖ Check firewall settings
        - ‚úÖ Try `host.docker.internal` instead of `localhost`
        
        ### Configuration UI not loading?
        ```bash
        docker-compose logs reacharr-config-ui
        ```
        
        ### Need to reset everything?
        ```bash
        docker-compose down
        rm -rf ./data
        docker-compose up -d
        ```
        
        ## üîê Security
        
        - All connections to Reacharr.com are encrypted
        - Your Radarr/Sonarr credentials stay local
        - Only metadata is shared, never files
        
        ## üìû Support
        
        - üìñ **Documentation**: https://docs.reacharr.com
        - üí¨ **Discord**: https://discord.gg/reacharr
        - üêõ **Issues**: https://github.com/${{ github.repository }}/issues
        - üìß **Email**: support@reacharr.com
        
        ---
        
        **Images used:**
        - Backend: `${{ env.REGISTRY }}/${{ env.REPO_OWNER_LOWER }}/${{ env.IMAGE_NAME_BACKEND }}:latest`
        - Frontend: `${{ env.REGISTRY }}/${{ env.REPO_OWNER_LOWER }}/${{ env.IMAGE_NAME_FRONTEND }}:latest`
        
        *Built with ‚ù§Ô∏è by the Reacharr team*
        EOF

    # Upload release artifacts
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: reacharr-local-agent-${{ github.sha }}
        path: |
          release/
        retention-days: 90

    # Create GitHub Release (only on main branch)
    - name: Create Release
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: local-agent-v${{ github.run_number }}
        name: "Reacharr Local Agent v${{ github.run_number }}"
        body: |
          ## üöÄ Reacharr Local Agent - Ready to Run!
          
          **Pre-built Docker images with automatic configuration** - No environment setup required!
          
          ### ‚ú® What's New:
          - ‚úÖ Zero-configuration Docker setup
          - ‚úÖ Pre-configured connection to reacharr.com
          - ‚úÖ Multi-architecture support (AMD64 + ARM64)
          - ‚úÖ Improved web UI with fixed nginx configuration
          - ‚úÖ Better error handling and logging
          - ‚úÖ MQTT TLS support with automatic certificate download
          
          ### üéØ Quick Start:
          1. Download `docker-compose.yml` 
          2. Run `docker-compose up -d`
          3. Open http://localhost:3001
          4. Configure your Radarr/Sonarr servers
          
          ### üê≥ Docker Images:
          - **Backend**: `${{ env.REGISTRY }}/${{ env.REPO_OWNER_LOWER }}/${{ env.IMAGE_NAME_BACKEND }}:latest`
          - **Config UI**: `${{ env.REGISTRY }}/${{ env.REPO_OWNER_LOWER }}/${{ env.IMAGE_NAME_FRONTEND }}:latest`
          
          ### üèóÔ∏è Supported Architectures:
          - Linux AMD64 (Intel/AMD)
          - Linux ARM64 (Apple Silicon, Raspberry Pi 4+)
          
          ### üìÅ What's Included:
          - `docker-compose.yml` - Ready-to-use Docker configuration
          - `README.md` - Complete setup and troubleshooting guide
          - `local-agent/` - Full source code with all configuration files
          
          **No more environment variables, Firebase setup, or complex configuration!**
          
        files: |
          release/docker-compose.yml
          release/README.md
          release/local-agent/
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
